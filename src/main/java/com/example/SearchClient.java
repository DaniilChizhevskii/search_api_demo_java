package com.example;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.StatusRuntimeException;

// Replace with the actual package generated by your proto
import yandex.cloud.api.search.v2.WebSearchServiceGrpc;

import java.util.concurrent.TimeUnit;

public class SearchClient {

    public static void main(String[] args) throws InterruptedException {
        // ===== CONFIGURE HOST/PORT =====
        String host = "searchapi.yandexcloud.net";
        int port = 443;

        ManagedChannel channel = ManagedChannelBuilder.forAddress(host, port).build();

        try {
            callSearch(channel, "hello");
        } finally {
            shutdownChannel(channel);
        }
    }

    private static void callSearch(ManagedChannel channel, String query) {
        // Create blocking stub
        SearchServiceGrpc.SearchServiceBlockingStub stub = SearchServiceGrpc.newBlockingStub(channel);

        // Build request - assuming the proto has a field "query" on SearchRequest
        SearchRequest request = SearchRequest.newBuilder()
                .setQuery(query)
                .build();

        try {
            // Call the rpc method. Method name in proto assumed to be "rpc Search(SearchRequest) returns (SearchResponse)"
            SearchResponse response = stub.search(request);

            // Print the raw response (proto-generated toString is useful for debug)
            System.out.println("Search response:\n" + response);

            // If you want to print specific fields, inspect the SearchResponse API and print them:
            // e.g. response.getTotalSize(), response.getResultsList(), etc.
            // (Replace with actual field accessors from the generated class.)
        } catch (StatusRuntimeException e) {
            System.err.println("RPC failed: " + e.getStatus() + " - " + e.getMessage());
            e.printStackTrace(System.err);
        }
    }

    private static void shutdownChannel(ManagedChannel channel) throws InterruptedException {
        channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }
}
